{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user account within the SwiftInvoice application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user account."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "createdAt",
        "updatedAt"
      ]
    },
    "Session": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Session",
      "type": "object",
      "description": "Represents a user session for authentication purposes.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the session."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User. (Relationship: User 1:N Session)"
        },
        "token": {
          "type": "string",
          "description": "The JWT token associated with the session."
        },
        "expiresAt": {
          "type": "string",
          "description": "Timestamp indicating when the session expires.",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the session was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "token",
        "expiresAt",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user account information. Path-based ownership ensures only the user can access their profile data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/sessions/{sessionId}",
        "definition": {
          "entityName": "Session",
          "schema": {
            "$ref": "#/backend/entities/Session"
          },
          "description": "Stores user session data. Path-based ownership ensures only the user can manage their sessions. Includes the userId to validate that request.auth.uid == resource.data.userId in security rules.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "sessionId",
              "description": "The unique identifier of the session."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure prioritizes security and scalability for the SwiftInvoice application. User data and sessions are stored under `/users/{userId}` to enforce path-based ownership, simplifying security rules and ensuring only the user can access their own data.  A dedicated `/sessions/{sessionId}` collection nested under the user's document stores session information, enabling easy session management. This design eliminates the need for complex `get()` calls in security rules, enhancing atomicity and debuggability. It supports QAPs by ensuring that `list` operations on `/users/{userId}` only return the requesting user's data, while `list` operations on `/sessions/{sessionId}` are similarly restricted. The use of dedicated subcollections segregates data with different access requirements, ensuring a homogeneous security posture within each collection. The `userId` is part of the session document; security rules will validate that `request.auth.uid == resource.data.userId`. There is no need to denormalize data."
  }
}