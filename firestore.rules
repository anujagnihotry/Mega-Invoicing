/**
 * @fileoverview Firestore Security Rules for SwiftInvoice.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has sole access to their profile data and associated sessions.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - User sessions are stored under `/users/{userId}/sessions/{sessionId}`.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing all users or sessions is disallowed.
 *
 * Denormalization for Authorization:
 * - The 'userId' field is included in the Session documents to allow validation that `request.auth.uid == resource.data.userId`.
 *
 * Structural Segregation:
 * - User profiles and session data are stored in separate collections to clearly define access boundaries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete): If the authenticated user's ID matches the userId in the path.
     *   Example: A user with UID "user123" can create/read/update/delete the document at /users/user123.
     * @deny (get, create, update, delete): If the authenticated user's ID does not match the userId in the path.
     *   Example: A user with UID "user456" cannot access the document at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to read their own profile.
      allow get: if isOwner(userId);

      // Allow a user to create their own profile, enforcing that the userId in the path matches the authenticated user's UID.
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;

      // Allow a user to update their own profile. Enforce immutability for the 'id' field.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow a user to delete their own profile.
      allow delete: if isExistingOwner(userId);

      // Do not allow listing of all users.
      allow list: if false;
    }

    /**
     * @description Secure user sessions. Only the authenticated user can manage their own sessions.
     * @path /users/{userId}/sessions/{sessionId}
     * @allow (get, create, update, delete): If the authenticated user's ID matches the userId in the path, and the session's userId matches the authenticated user's UID.
     *   Example: A user with UID "user123" can create/read/update/delete a session document at /users/user123/sessions/session456 where the session document's userId field is also "user123".
     * @deny (get, create, update, delete): If the authenticated user's ID does not match the userId in the path, or if the session's userId does not match the authenticated user's UID.
     *   Example: A user with UID "user456" cannot access the session document at /users/user123/sessions/session456, or a user "user123" cannot access a session document with userId="user456".
     * @principle Enforces document ownership for all operations and validates relational integrity between the user and session documents.
     */
    match /users/{userId}/sessions/{sessionId} {
      // Helper function to check if the authenticated user is the owner of the session document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the session document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to read their own session.
      allow get: if isOwner(userId);

      // Allow a user to create a new session for themselves, enforcing that the userId in the path matches the authenticated user's UID, and the session data's userId also matches.
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;

      // Allow a user to update their own session. Enforce that the userId cannot be changed after creation.
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Allow a user to delete their own session.
      allow delete: if isExistingOwner(userId);

      // Do not allow listing of all sessions.
      allow list: if isOwner(userId);
    }
  }
}